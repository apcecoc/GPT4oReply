import aiohttp
import asyncio
from telethon.tl.types import Message
from .. import loader, utils

__version__ = (1, 0, 3)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ 
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2024
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://example.com/api_icon.png
# meta banner: https://example.com/api_banner.jpg
# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

@loader.tds
class GPT4oReplyMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4o API"""

    strings = {
        "name": "GPT4oReply",
        "error": "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
        "invalid_message": "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>",
    }

    @loader.command(ru_doc="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    async def gpt4oreply(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not message.is_reply:
            await utils.answer(message, self.strings("invalid_message"))
            return

        reply_message = await message.get_reply_message()
        user_message = reply_message.raw_text

        if not user_message:
            await utils.answer(message, self.strings("invalid_message"))
            return

        api_url = "https://api.paxsenix.biz.id/ai/gpt4o"
        headers = {"Content-Type": "application/json"}
        payload = {
            "messages": [
                {
                    "role": "user",
                    "content": (
                        "–°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ö–æ–∂–∏–π –∏ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞–º–µ—Ç–Ω–æ, "
                        "—á—Ç–æ —Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å. –í –º–µ—Ä—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ "
                        "—Å–ª–µ–Ω–≥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –±—Ä–∞–Ω—å, –Ω–æ –≤ –º–µ—Ä—É. "
                        f"–ü—Ä–∏–¥—É–º–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
                    ),
                }
            ]
        }

        async def animate_processing():
            dots = ""
            while not animation_done:
                dots = dots + "." if len(dots) < 4 else ""
                await utils.answer(message, dots)
                await asyncio.sleep(0.5)

        animation_done = False
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            animation_task = asyncio.create_task(animate_processing())

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data.get("ok", False):
                            generated_reply = data.get("message", "‚ùå <b>API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.</b>")
                            animation_done = True  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                            animation_task.cancel()
                            await utils.answer(message, generated_reply)
                        else:
                            animation_done = True
                            animation_task.cancel()
                            await utils.answer(message, self.strings("error"))
                    else:
                        animation_done = True
                        animation_task.cancel()
                        await utils.answer(message, self.strings("error"))
        except Exception as e:
            animation_done = True
            animation_task.cancel()
            await utils.answer(message, self.strings("error"))
            raise e
